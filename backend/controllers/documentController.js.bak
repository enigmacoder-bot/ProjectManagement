const sql = require("../database/db");
const supabase = require("../database/supabase"); // Import the initialized Supabase client

// @Description Add a new project document reference
// @Route site.com/data-management/addProjectDocument
const addProjectDocument = async (req, res) => {
  console.log("inside the add project document");
  const { project_id, template_id, phase } = req.body;
  const file = req.file; // This should be populated by multer

  console.log("Received file:", file);
  console.log("Request body:", req.body); // Debugging line

  // Check if the file and required fields are present
  if (!file) {
    return res.status(400).json({
      status: "failure",
      message: "No file uploaded.",
    });
  }

  if (!project_id || !template_id || !phase) {
    return res.status(400).json({
      status: "failure",
      message: "Project ID, Template ID, and Phase are required.",
    });
  }

  try {
    // Upload the file to Supabase storage
    // Determine content type based on file extension
    const fileExtension = file.originalname.split('.').pop().toLowerCase();
    let contentType = 'application/octet-stream'; // Default content type
    
    // Set content type based on common file extensions
    if (fileExtension === 'pdf') {
      contentType = 'application/pdf';
    } else if (['doc', 'docx'].includes(fileExtension)) {
      contentType = 'application/msword';
    } else if (['xls', 'xlsx'].includes(fileExtension)) {
      contentType = 'application/vnd.ms-excel';
    } else if (['jpg', 'jpeg'].includes(fileExtension)) {
      contentType = 'image/jpeg';
    } else if (fileExtension === 'png') {
      contentType = 'image/png';
    }
    
    // Check if we have a valid buffer
    if (!file.buffer || !(file.buffer instanceof Buffer)) {
      console.error("Invalid file buffer:", typeof file.buffer);
      return res.status(400).json({
        status: "failure",
        message: "Invalid file format or corrupt file",
      });
    }
    
    // Log file details for debugging
    console.log("File details:", {
      name: file.originalname,
      size: file.buffer.length,
      mimeType: contentType,
      extension: fileExtension
    });
    
    // Special handling for PDFs to ensure proper binary storage
    const uploadOptions = {
      contentType: contentType,
      upsert: true // Replace if exists
    };

    // For PDFs, explicitly set additional options to ensure proper binary storage
    if (fileExtension === 'pdf') {
      uploadOptions.cacheControl = '3600';
      uploadOptions.contentType = 'application/pdf'; // Force content type again
      console.log("Using special PDF handling with options:", uploadOptions);
    }
    
    // Create a unique filename with timestamp to avoid caching issues with same filename
    const timestamp = Date.now();
    const uniqueFilename = `${timestamp}-${file.originalname}`;
    
    const { data, error } = await supabase.storage
      .from("project-documents")
      .upload(`projects/${project_id}/${uniqueFilename}`, file.buffer, uploadOptions);
